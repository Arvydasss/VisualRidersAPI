// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Northwind.Data;

#nullable disable

namespace APIforVisualRiders.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    [Migration("20221230144511_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Northwind.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ContactName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Fax")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Region")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("HireDate")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Region")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("ReportsTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.EmployeeTerritory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TerritoryId")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("EmployeeTerritory", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Freight")
                        .IsRequired()
                        .HasColumnType("DECIMAL");

                    b.Property<string>("OrderDate")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("RequiredDate")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("ShipVia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippedDate")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<double>("Discount")
                        .HasColumnType("DOUBLE");

                    b.Property<long?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("DECIMAL");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Discontinued")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("DECIMAL");

                    b.Property<long>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UnitsOnOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.ProductDetail", b =>
                {
                    b.Property<string>("CategoryDescription")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("Discontinued")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupplierName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("SupplierRegion")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<byte[]>("UnitPrice")
                        .HasColumnType("DECIMAL");

                    b.Property<long?>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UnitsOnOrder")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("ProductDetails", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionDescription")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Shipper", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Shipper", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ContactName")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Fax")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("HomePage")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<string>("Region")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Northwind.Models.Territory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TerritoryDescription")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id");

                    b.ToTable("Territory", (string)null);
                });

            modelBuilder.Entity("apiForVisualRiders.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Company")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkingHourEndStr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkingHourStartStr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7517440-4dc6-4fe3-8f0f-80fdfd1d35f6"),
                            Address = "AddrStr",
                            Company = new Guid("d1ce4e4b-813f-4c89-9440-19cfb83a7669"),
                            Contacts = "+3706112",
                            Status = 0,
                            WorkingDays = 1,
                            WorkingHourEndStr = "11:11",
                            WorkingHourStartStr = "00:00"
                        });
                });

            modelBuilder.Entity("Northwind.Models.EmployeeTerritory", b =>
                {
                    b.HasOne("Northwind.Models.Employee", "Employee")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Northwind.Models.Territory", "Territory")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TerritoryId");

                    b.Navigation("Employee");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Northwind.Models.Order", b =>
                {
                    b.HasOne("Northwind.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Northwind.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Northwind.Models.OrderDetail", b =>
                {
                    b.HasOne("Northwind.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Northwind.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Northwind.Models.Product", b =>
                {
                    b.HasOne("Northwind.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Northwind.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Northwind.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Northwind.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Northwind.Models.Employee", b =>
                {
                    b.Navigation("EmployeeTerritories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Northwind.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Northwind.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Northwind.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Northwind.Models.Territory", b =>
                {
                    b.Navigation("EmployeeTerritories");
                });
#pragma warning restore 612, 618
        }
    }
}
